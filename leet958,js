/**
Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
 */

/**
 * Definition for a binary tree node.
 * function TreeNode(val, left, right) {
 *     this.val = (val===undefined ? 0 : val)
 *     this.left = (left===undefined ? null : left)
 *     this.right = (right===undefined ? null : right)
 * }
 */
/**
 * @param {TreeNode} root
 * @return {boolean}
 */
var isCompleteTreeByLevel = function(root) {
    /**
        @param {TreeNode[]} level
        @return {boolean}
     */
    const depth = function (level,ShouldBeEmpty) {
        if (ShouldBeEmpty) return !level.filter(Boolean).length;
        let NewLevel = [];
        for (let i = 0; i < level.length; i++) {
            if (!level[i]) {
                ShouldBeEmpty = true;
                NewLevel.push(null, null)
                continue;
            }
            if (ShouldBeEmpty) {
                return false;
            }
            

            NewLevel.push(level[i].left,level[i].right)
        }

        return depth(NewLevel, ShouldBeEmpty);
    }

    return depth([root],false)



};
